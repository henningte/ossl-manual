geom_density_ridges_gradient(scale = 3, rel_min_height = 0.01, gradient_lwd = 1.) +
scale_x_continuous(expand = c(0.01, 0)) +
scale_x_continuous(trans='log2') +
scale_y_discrete(expand = c(0.01, 0)) +
scale_fill_viridis(name = j, option = "C") +
labs(
title = j
) +
theme_ridges(font_size = 13, grid = TRUE) + theme(axis.title.y = element_blank())
ggsave(out.png, width = 7, height = 7)
}
}
## without log-transform
kssl.yw$silt.tot_usda.3a1_wpct = ifelse(kssl.yw$silt.tot_usda.3a1_wpct>100, 100, kssl.yw$silt.tot_usda.3a1_wpct)
for(j in c("sand.tot_usda.3a1_wpct", "silt.tot_usda.3a1_wpct", "clay.tot_usda.3a1_wpct",
"bd.od_usda.3b2_gcm3", "ph.kcl_usda.4c1_index", "ph.h2o_usda.4c1_index",
"ph.cacl2_usda.4c1_index", "wr.33kbar_usda.3c1_wpct", "wr.1500kbar_usda.3c2_wpct")){
out.png = paste0("./hist/", j, "_hist.png")
if(!file.exists(out.png)){
sel.df = kssl.yw[,c("dataset.code_ascii_c", j)]
sel.df$response = sel.df[,2]
ggplot(sel.df, aes(x = response, y = dataset.code_ascii_c, fill = ..x..)) +
geom_density_ridges_gradient(scale = 3, rel_min_height = 0.01, gradient_lwd = 1.) +
scale_x_continuous(expand = c(0.01, 0)) +
scale_y_discrete(expand = c(0.01, 0)) +
scale_fill_viridis(name = j, option = "C") +
labs(
title = j
) +
theme_ridges(font_size = 13, grid = TRUE) + theme(axis.title.y = element_blank())
ggsave(out.png, width = 7, height = 7)
}
}
library(captioner)
library(openair)
fig_nums <- captioner(prefix = "Fig.")
source("R/ossl_functions.R")
kssl.yw = readRDS(url("http://s3.us-east-1.wasabisys.com/soilspectroscopy/ossl_import/ossl_soillab_v1.rds", "rb"))
kssl.sitef = readRDS(url("http://s3.us-east-1.wasabisys.com/soilspectroscopy/ossl_import/ossl_soilsite_v1.rds", "rb"))
kssl.yw$layer.upper.depth_usda_cm = plyr::join(kssl.yw["id.layer_uuid_c"], kssl.sitef, match="first")$layer.upper.depth_usda_cm
kssl.yw$layer.lower.depth_usda_cm = plyr::join(kssl.yw["id.layer_uuid_c"], kssl.sitef, match="first")$layer.lower.depth_usda_cm
kssl.yw$depth = kssl.yw$layer.upper.depth_usda_cm + (kssl.yw$layer.lower.depth_usda_cm - kssl.yw$layer.upper.depth_usda_cm)/2
kssl.yw$dataset.code_ascii_c = plyr::join(kssl.yw["id.layer_local_c"], kssl.sitef, match="first")$dataset.code_ascii_c
kssl.yw = kssl.yw[!is.na(kssl.yw$dataset.code_ascii_c),]
library(captioner)
library(openair)
fig_nums <- captioner(prefix = "Fig.")
source("R/ossl_functions.R")
kssl.yw = readRDS(url("http://s3.us-east-1.wasabisys.com/soilspectroscopy/ossl_import/ossl_soillab_v1.rds", "rb"))
kssl.sitef = readRDS(url("http://s3.us-east-1.wasabisys.com/soilspectroscopy/ossl_import/ossl_soilsite_v1.rds", "rb"))
kssl.yw$layer.upper.depth_usda_cm = plyr::join(kssl.yw["id.layer_uuid_c"], kssl.sitef, match="first")$layer.upper.depth_usda_cm
kssl.yw$layer.lower.depth_usda_cm = plyr::join(kssl.yw["id.layer_uuid_c"], kssl.sitef, match="first")$layer.lower.depth_usda_cm
kssl.yw$depth = kssl.yw$layer.upper.depth_usda_cm + (kssl.yw$layer.lower.depth_usda_cm - kssl.yw$layer.upper.depth_usda_cm)/2
kssl.yw$dataset.code_ascii_c = plyr::join(kssl.yw["id.layer_local_c"], kssl.sitef, match="first")$dataset.code_ascii_c
kssl.yw = kssl.yw[!is.na(kssl.yw$dataset.code_ascii_c),]
library(ggplot2)
library(viridis)
library(ggridges)
## log-normal variables
for(j in c("wpg2_usda.3a2_wpct", "ecec_usda.4b4_cmolkg", "ec.w_usda.4f1_dsm", "oc_usda.calc_wpct",
"ca.ext_usda.4b1_cmolkg", "c.tot_usda.4h2_wpct", "caco3_usda.4e1_wpct", "cec.ext_usda.4b1_cmolkg",
"sum.bases_4b4b2a_cmolkg", "mg.ext_usda.4b1_cmolkg", "n.tot_usda.4h2_wpct",
"al.kcl_usda.4b3_cmolkg", "p.meh3_usda.4d6_mgkg", "k.meh3_usda.4d6_mgkg",
"na.meh3_usda.4d6_mgkg", "mg.meh3_usda.4d6_mgkg", "fe.meh3_usda.4d6_mgkg", "gyp_usda.4e2_wpct")){
out.png = paste0("./hist/", j, "_hist.png")
if(!file.exists(out.png)){
sel.df = kssl.yw[,c("dataset.code_ascii_c", j)]
sel.df$response = sel.df[,2]+1
ggplot(sel.df, aes(x = response, y = dataset.code_ascii_c, fill = ..x..)) +
geom_density_ridges_gradient(scale = 3, rel_min_height = 0.01, gradient_lwd = 1.) +
scale_x_continuous(expand = c(0.01, 0)) +
scale_x_continuous(trans='log2') +
scale_y_discrete(expand = c(0.01, 0)) +
scale_fill_viridis(name = j, option = "C") +
labs(
title = j
) +
theme_ridges(font_size = 13, grid = TRUE) + theme(axis.title.y = element_blank())
ggsave(out.png, width = 7, height = 7)
}
}
## without log-transform
kssl.yw$silt.tot_usda.3a1_wpct = ifelse(kssl.yw$silt.tot_usda.3a1_wpct>100, 100, kssl.yw$silt.tot_usda.3a1_wpct)
for(j in c("sand.tot_usda.3a1_wpct", "silt.tot_usda.3a1_wpct", "clay.tot_usda.3a1_wpct",
"bd.od_usda.3b2_gcm3", "ph.kcl_usda.4c1_index", "ph.h2o_usda.4c1_index",
"ph.cacl2_usda.4c1_index", "wr.33kbar_usda.3c1_wpct", "wr.1500kbar_usda.3c2_wpct")){
out.png = paste0("./hist/", j, "_hist.png")
if(!file.exists(out.png)){
sel.df = kssl.yw[,c("dataset.code_ascii_c", j)]
sel.df$response = sel.df[,2]
ggplot(sel.df, aes(x = response, y = dataset.code_ascii_c, fill = ..x..)) +
geom_density_ridges_gradient(scale = 3, rel_min_height = 0.01, gradient_lwd = 1.) +
scale_x_continuous(expand = c(0.01, 0)) +
scale_y_discrete(expand = c(0.01, 0)) +
scale_fill_viridis(name = j, option = "C") +
labs(
title = j
) +
theme_ridges(font_size = 13, grid = TRUE) + theme(axis.title.y = element_blank())
ggsave(out.png, width = 7, height = 7)
}
}
x = paste0("scan_mir.", seq(600, 4000, by=2), "_abs")
str(x)
a = seq(0, 3000, by=10)
r = 1/exp(a/1000) * 100
plot.xy(data.frame(a,r))
a = seq(0, 3000, by=10)
r = 1/exp(a/1000) * 100
plot.xy(data.frame(a,r), type="l")
?plot.xy
plot(data.frame(a,r), type="l")
a = seq(0, 3000, by=10)
r = 1/exp(a/1000) * 100
plot(data.frame(a,r), type="l", xlab="Absorbance", ylab="Reflectance")
openair::scatterPlot(kssl.yw, x = "depth", y = "sand.tot_usda.3a1_wpct", method = "hexbin",
col = "increment", log.x = TRUE, log.y=TRUE, ylab="SOC wprm", xlab="depth in cm")
openair::scatterPlot(kssl.yw, x = "depth", y = "silt.tot_usda.3a1_wpct", method = "hexbin",
col = "increment", log.x = TRUE, log.y=TRUE, ylab="Silt wpct", xlab="depth in cm")
openair::scatterPlot(kssl.yw, x = "depth", y = "sand.tot_usda.3a1_wpct", method = "hexbin",
col = "increment", log.x = TRUE, log.y=TRUE, ylab="Sand wpct", xlab="depth in cm")
knitr::include_graphics("hist/sand.tot_usda.3a1_wpct_hist.png")
knitr::include_graphics("hist/silt.tot_usda.3a1_wpct_hist.png")
knitr::include_graphics("hist/clay.tot_usda.3a1_wpct_hist.png")
openair::scatterPlot(kssl.yw, x = "depth", y = "clay.tot_usda.3a1_wpct", method = "hexbin",
col = "increment", log.x = TRUE, log.y=TRUE, ylab="Clay wpct", xlab="depth in cm")
openair::scatterPlot(kssl.yw, x = "depth", y = "oc_usda.calc_wpct", method = "hexbin",
col = "increment", log.x = TRUE, log.y=TRUE, ylab="WPG2 wpct", xlab="depth in cm")
openair::scatterPlot(kssl.yw, x = "depth", y = "wpg2_usda.3a2_wpct", method = "hexbin",
col = "increment", log.x = TRUE, log.y=TRUE, ylab="WPG2 wpct", xlab="depth in cm")
knitr::include_graphics("hist/wpg2_usda.3a2_wpct_hist.png")
openair::scatterPlot(kssl.yw, x = "depth", y = "wr.1500kbar_usda.3c2_wpct", method = "hexbin",
col = "increment", log.x = TRUE, log.y=TRUE, ylab="PWP wprm", xlab="depth in cm")
knitr::include_graphics("hist/wr.1500kbar_usda.3c2_wpct_hist.png")
openair::scatterPlot(kssl.yw, x = "depth", y = "wr.33kbar_usda.3c1_wpct", method = "hexbin",
col = "increment", log.x = TRUE, log.y=TRUE, ylab="FC wpct", xlab="depth in cm")
knitr::include_graphics("hist/wr.33kbar_usda.3c1_wpct_hist.png")
openair::scatterPlot(kssl.yw, x = "depth", y = "bd.od_usda.3b4_gcm3", method = "hexbin",
col = "increment", log.x = TRUE, log.y=TRUE, ylab="BD t/m3", xlab="depth in cm")
openair::scatterPlot(kssl.yw, x = "depth", y = "bd.od_usda.3b4_gcm3", method = "hexbin",
col = "increment", log.x = TRUE, log.y=TRUE, ylab="BD t/m3", xlab="depth in cm")
summary(kssl.yw$bd.od_usda.3b2_gcm3)
openair::scatterPlot(kssl.yw, x = "depth", y = "bd.od_usda.3b2_gcm3", method = "hexbin",
col = "increment", log.x = TRUE, log.y=TRUE, ylab="BD t/m3", xlab="depth in cm")
knitr::include_graphics("hist/bd.od_usda.3b2_gcm3_hist.png")
openair::scatterPlot(kssl.yw, x = "depth", y = "c.tot_usda.4h2_wpct", method = "hexbin",
col = "increment", log.x = TRUE, log.y=TRUE, ylab="SOC wprm", xlab="depth in cm")
knitr::include_graphics("hist/c.tot_usda.4h2_wpct_hist.png")
openair::scatterPlot(kssl.yw, x = "depth", y = "n.tot_usda.4h2_wpct", method = "hexbin",
col = "increment", log.x = TRUE, log.y=TRUE, ylab="SOC wprm", xlab="depth in cm")
knitr::include_graphics("hist/n.tot_usda.4h2_wpct_hist.png")
openair::scatterPlot(kssl.yw, x = "depth", y = "caco3_usda.4e1_wpct", method = "hexbin",
col = "increment", log.x = TRUE, log.y=TRUE, ylab="CaCO3 wpct", xlab="depth in cm")
knitr::include_graphics("hist/caco3_usda.4e1_wpct_hist.png")
openair::scatterPlot(kssl.yw, x = "depth", y = "ca.ext_usda.4b1_cmolkg", method = "hexbin",
col = "increment", log.x = TRUE, log.y=TRUE, ylab="ExCa cmol/kg", xlab="depth in cm")
knitr::include_graphics("hist/ca.ext_usda.4b1_cmolkg_hist.png")
openair::scatterPlot(kssl.yw, x = "depth", y = "cec.ext_usda.4b1_cmolkg", method = "hexbin",
col = "increment", log.x = TRUE, log.y=TRUE, ylab="SOC wprm", xlab="depth in cm")
openair::scatterPlot(kssl.yw, x = "depth", y = "cec.ext_usda.4b1_cmolkg", method = "hexbin",
col = "increment", log.x = TRUE, log.y=TRUE, ylab="CEC in cmol/kg", xlab="depth in cm")
knitr::include_graphics("hist/cec.ext_usda.4b1_cmolkg_hist.png")
openair::scatterPlot(kssl.yw, x = "depth", y = "ecec_usda.4b4_cmolkg", method = "hexbin",
col = "increment", log.x = TRUE, log.y=TRUE, ylab="SOC wprm", xlab="depth in cm")
knitr::include_graphics("hist/ecec_usda.4b4_cmolkg_hist.png")
knitr::include_graphics("hist/mg.ext_usda.4b1_cmolkg_hist.png")
openair::scatterPlot(kssl.yw, x = "depth", y = "mg.ext_usda.4b1_cmolkg", method = "hexbin",
col = "increment", log.x = TRUE, log.y=TRUE, ylab="ExMg in cmol/kg", xlab="depth in cm")
openair::scatterPlot(kssl.yw, x = "depth", y = "k.ext_usda.4b1_cmolkg", method = "hexbin",
col = "increment", log.x = TRUE, log.y=TRUE, ylab="ExK in cmol/kg", xlab="depth in cm")
knitr::include_graphics("hist/k.ext_usda.4b1_cmolkg_hist.png")
library(ggplot2)
library(viridis)
library(ggridges)
## log-normal variables
for(j in c("wpg2_usda.3a2_wpct", "ecec_usda.4b4_cmolkg", "ec.w_usda.4f1_dsm", "oc_usda.calc_wpct",
"ca.ext_usda.4b1_cmolkg", "c.tot_usda.4h2_wpct", "caco3_usda.4e1_wpct", "cec.ext_usda.4b1_cmolkg",
"k.ext_usda.4b1_cmolkg", "sum.bases_4b4b2a_cmolkg", "mg.ext_usda.4b1_cmolkg", "n.tot_usda.4h2_wpct",
"al.kcl_usda.4b3_cmolkg", "p.meh3_usda.4d6_mgkg", "k.meh3_usda.4d6_mgkg",
"na.meh3_usda.4d6_mgkg", "mg.meh3_usda.4d6_mgkg", "fe.meh3_usda.4d6_mgkg", "gyp_usda.4e2_wpct")){
out.png = paste0("./hist/", j, "_hist.png")
if(!file.exists(out.png)){
sel.df = kssl.yw[,c("dataset.code_ascii_c", j)]
sel.df$response = sel.df[,2]+1
ggplot(sel.df, aes(x = response, y = dataset.code_ascii_c, fill = ..x..)) +
geom_density_ridges_gradient(scale = 3, rel_min_height = 0.01, gradient_lwd = 1.) +
scale_x_continuous(expand = c(0.01, 0)) +
scale_x_continuous(trans='log2') +
scale_y_discrete(expand = c(0.01, 0)) +
scale_fill_viridis(name = j, option = "C") +
labs(
title = j
) +
theme_ridges(font_size = 13, grid = TRUE) + theme(axis.title.y = element_blank())
ggsave(out.png, width = 7, height = 7)
}
}
## without log-transform
kssl.yw$silt.tot_usda.3a1_wpct = ifelse(kssl.yw$silt.tot_usda.3a1_wpct>100, 100, kssl.yw$silt.tot_usda.3a1_wpct)
for(j in c("sand.tot_usda.3a1_wpct", "silt.tot_usda.3a1_wpct", "clay.tot_usda.3a1_wpct",
"bd.od_usda.3b2_gcm3", "ph.kcl_usda.4c1_index", "ph.h2o_usda.4c1_index",
"ph.cacl2_usda.4c1_index", "wr.33kbar_usda.3c1_wpct", "wr.1500kbar_usda.3c2_wpct")){
out.png = paste0("./hist/", j, "_hist.png")
if(!file.exists(out.png)){
sel.df = kssl.yw[,c("dataset.code_ascii_c", j)]
sel.df$response = sel.df[,2]
ggplot(sel.df, aes(x = response, y = dataset.code_ascii_c, fill = ..x..)) +
geom_density_ridges_gradient(scale = 3, rel_min_height = 0.01, gradient_lwd = 1.) +
scale_x_continuous(expand = c(0.01, 0)) +
scale_y_discrete(expand = c(0.01, 0)) +
scale_fill_viridis(name = j, option = "C") +
labs(
title = j
) +
theme_ridges(font_size = 13, grid = TRUE) + theme(axis.title.y = element_blank())
ggsave(out.png, width = 7, height = 7)
}
}
knitr::include_graphics("hist/k.ext_usda.4b1_cmolkg_hist.png")
knitr::include_graphics("hist/na.ext_usda.4b1_cmolkg_hist.png")
library(ggplot2)
library(viridis)
library(ggridges)
## log-normal variables
for(j in c("wpg2_usda.3a2_wpct", "ecec_usda.4b4_cmolkg", "ec.w_usda.4f1_dsm", "oc_usda.calc_wpct",
"ca.ext_usda.4b1_cmolkg", "c.tot_usda.4h2_wpct", "caco3_usda.4e1_wpct", "cec.ext_usda.4b1_cmolkg",
"k.ext_usda.4b1_cmolkg", "sum.bases_4b4b2a_cmolkg", "mg.ext_usda.4b1_cmolkg", "n.tot_usda.4h2_wpct", "na.ext_usda.4b1_cmolkg",
"al.kcl_usda.4b3_cmolkg", "p.meh3_usda.4d6_mgkg", "k.meh3_usda.4d6_mgkg",
"na.meh3_usda.4d6_mgkg", "mg.meh3_usda.4d6_mgkg", "fe.meh3_usda.4d6_mgkg", "gyp_usda.4e2_wpct")){
out.png = paste0("./hist/", j, "_hist.png")
if(!file.exists(out.png)){
sel.df = kssl.yw[,c("dataset.code_ascii_c", j)]
sel.df$response = sel.df[,2]+1
ggplot(sel.df, aes(x = response, y = dataset.code_ascii_c, fill = ..x..)) +
geom_density_ridges_gradient(scale = 3, rel_min_height = 0.01, gradient_lwd = 1.) +
scale_x_continuous(expand = c(0.01, 0)) +
scale_x_continuous(trans='log2') +
scale_y_discrete(expand = c(0.01, 0)) +
scale_fill_viridis(name = j, option = "C") +
labs(
title = j
) +
theme_ridges(font_size = 13, grid = TRUE) + theme(axis.title.y = element_blank())
ggsave(out.png, width = 7, height = 7)
}
}
## without log-transform
kssl.yw$silt.tot_usda.3a1_wpct = ifelse(kssl.yw$silt.tot_usda.3a1_wpct>100, 100, kssl.yw$silt.tot_usda.3a1_wpct)
for(j in c("sand.tot_usda.3a1_wpct", "silt.tot_usda.3a1_wpct", "clay.tot_usda.3a1_wpct",
"bd.od_usda.3b2_gcm3", "ph.kcl_usda.4c1_index", "ph.h2o_usda.4c1_index",
"ph.cacl2_usda.4c1_index", "wr.33kbar_usda.3c1_wpct", "wr.1500kbar_usda.3c2_wpct")){
out.png = paste0("./hist/", j, "_hist.png")
if(!file.exists(out.png)){
sel.df = kssl.yw[,c("dataset.code_ascii_c", j)]
sel.df$response = sel.df[,2]
ggplot(sel.df, aes(x = response, y = dataset.code_ascii_c, fill = ..x..)) +
geom_density_ridges_gradient(scale = 3, rel_min_height = 0.01, gradient_lwd = 1.) +
scale_x_continuous(expand = c(0.01, 0)) +
scale_y_discrete(expand = c(0.01, 0)) +
scale_fill_viridis(name = j, option = "C") +
labs(
title = j
) +
theme_ridges(font_size = 13, grid = TRUE) + theme(axis.title.y = element_blank())
ggsave(out.png, width = 7, height = 7)
}
}
knitr::include_graphics("hist/na.ext_usda.4b1_cmolkg_hist.png")
openair::scatterPlot(kssl.yw, x = "depth", y = "na.ext_usda.4b1_cmolkg", method = "hexbin",
col = "increment", log.x = TRUE, log.y=TRUE, ylab="ExNa in cmol/kg", xlab="depth in cm")
openair::scatterPlot(kssl.yw, x = "depth", y = "al.kcl_usda.4b3_cmolkg", method = "hexbin",
col = "increment", log.x = TRUE, log.y=TRUE, ylab="ExAl in cmol/kg", xlab="depth in cm")
knitr::include_graphics("hist/al.kcl_usda.4b3_cmolkg_hist.png")
openair::scatterPlot(kssl.yw, x = "depth", y = "bsat_usda.4b4_wpct", method = "hexbin",
col = "increment", log.x = TRUE, log.y=TRUE, ylab="BS in wpct", xlab="depth in cm")
knitr::include_graphics("hist/bsat_usda.4b4_wpct_hist.png")
library(ggplot2)
library(viridis)
library(ggridges)
## log-normal variables
for(j in c("wpg2_usda.3a2_wpct", "ecec_usda.4b4_cmolkg", "ec.w_usda.4f1_dsm", "oc_usda.calc_wpct",
"ca.ext_usda.4b1_cmolkg", "c.tot_usda.4h2_wpct", "caco3_usda.4e1_wpct", "cec.ext_usda.4b1_cmolkg", "bsat_usda.4b4_wpct",
"k.ext_usda.4b1_cmolkg", "sum.bases_4b4b2a_cmolkg", "mg.ext_usda.4b1_cmolkg", "n.tot_usda.4h2_wpct", "na.ext_usda.4b1_cmolkg",
"al.kcl_usda.4b3_cmolkg", "p.meh3_usda.4d6_mgkg", "k.meh3_usda.4d6_mgkg",
"na.meh3_usda.4d6_mgkg", "mg.meh3_usda.4d6_mgkg", "fe.meh3_usda.4d6_mgkg", "gyp_usda.4e2_wpct")){
out.png = paste0("./hist/", j, "_hist.png")
if(!file.exists(out.png)){
sel.df = kssl.yw[,c("dataset.code_ascii_c", j)]
sel.df$response = sel.df[,2]+1
ggplot(sel.df, aes(x = response, y = dataset.code_ascii_c, fill = ..x..)) +
geom_density_ridges_gradient(scale = 3, rel_min_height = 0.01, gradient_lwd = 1.) +
scale_x_continuous(expand = c(0.01, 0)) +
scale_x_continuous(trans='log2') +
scale_y_discrete(expand = c(0.01, 0)) +
scale_fill_viridis(name = j, option = "C") +
labs(
title = j
) +
theme_ridges(font_size = 13, grid = TRUE) + theme(axis.title.y = element_blank())
ggsave(out.png, width = 7, height = 7)
}
}
## without log-transform
kssl.yw$silt.tot_usda.3a1_wpct = ifelse(kssl.yw$silt.tot_usda.3a1_wpct>100, 100, kssl.yw$silt.tot_usda.3a1_wpct)
for(j in c("sand.tot_usda.3a1_wpct", "silt.tot_usda.3a1_wpct", "clay.tot_usda.3a1_wpct",
"bd.od_usda.3b2_gcm3", "ph.kcl_usda.4c1_index", "ph.h2o_usda.4c1_index",
"ph.cacl2_usda.4c1_index", "wr.33kbar_usda.3c1_wpct", "wr.1500kbar_usda.3c2_wpct")){
out.png = paste0("./hist/", j, "_hist.png")
if(!file.exists(out.png)){
sel.df = kssl.yw[,c("dataset.code_ascii_c", j)]
sel.df$response = sel.df[,2]
ggplot(sel.df, aes(x = response, y = dataset.code_ascii_c, fill = ..x..)) +
geom_density_ridges_gradient(scale = 3, rel_min_height = 0.01, gradient_lwd = 1.) +
scale_x_continuous(expand = c(0.01, 0)) +
scale_y_discrete(expand = c(0.01, 0)) +
scale_fill_viridis(name = j, option = "C") +
labs(
title = j
) +
theme_ridges(font_size = 13, grid = TRUE) + theme(axis.title.y = element_blank())
ggsave(out.png, width = 7, height = 7)
}
}
knitr::include_graphics("hist/bsat_usda.4b4_wpct_hist.png")
openair::scatterPlot(kssl.yw, x = "depth", y = "ph.h2o_usda.4c1_index", method = "hexbin",
col = "increment", log.x = TRUE, ylab="Soil pH", xlab="depth in cm")
knitr::include_graphics("hist/ph.h2o_usda.4c1_index_hist.png")
openair::scatterPlot(kssl.yw, x = "depth", y = "ph.cacl2_usda.4c1_index", method = "hexbin",
col = "increment", log.x = TRUE, log.y=TRUE, ylab="pH CaCl", xlab="depth in cm")
knitr::include_graphics("hist/ph.cacl2_usda.4c1_index_hist.png")
knitr::include_graphics("hist/gyp_usda.4e2_wpct_hist.png")
openair::scatterPlot(kssl.yw, x = "depth", y = "gyp_usda.4e2_wpct", method = "hexbin",
col = "increment", log.x = TRUE, log.y=TRUE, ylab="SOC wprm", xlab="depth in cm")
openair::scatterPlot(kssl.yw, x = "depth", y = "wpg2_usda.3a2_wpct", method = "hexbin",
col = "increment", log.x = TRUE, log.y=TRUE, ylab="WPG2 wpct", xlab="depth in cm")
knitr::include_graphics("hist/wpg2_usda.3a2_wpct_hist.png")
openair::scatterPlot(kssl.yw, x = "depth", y = "wr.33kbar_usda.3c1_wpct", method = "hexbin",
col = "increment", log.x = TRUE, log.y=TRUE, ylab="FC wpct", xlab="depth in cm")
knitr::include_graphics("hist/wr.33kbar_usda.3c1_wpct_hist.png")
openair::scatterPlot(kssl.yw, x = "depth", y = "bd.od_usda.3b2_gcm3", method = "hexbin",
col = "increment", log.x = TRUE, log.y=TRUE, ylab="BD t/m3", xlab="depth in cm")
a = seq(0, 3000, by=10)
r = 1/exp(a/1000) * 100
plot(data.frame(a,r), type="l", xlab="Absorbance", ylab="Reflectance [%]")
openair::scatterPlot(ossl.yw, x = "depth", y = "sand.tot_usda.3a1_wpct", method = "hexbin",
col = "increment", log.x = TRUE, ylab="Sand wpct", xlab="depth in cm")
ls <- c("plyr", "rgdal", "terra", "mlr", "ranger", "xgboost", "Cubist", "fastDummies", "prospectr")
new.packages <- ls[!(ls %in% installed.packages()[,"Package"])]
if(length(new.packages)) install.packages(new.packages)
x = lapply(ls, require, character.only = TRUE)
source('./R/ossl_functions.R')
rep = "http://s3.us-east-1.wasabisys.com/soilspectroscopy/ossl_models/"
pcm1 = url(paste0(rep, "pca.ossl/mpca_mir_kssl_v1.rds"), "rb")
eml1 = url(paste0(rep, "log..oc_usda.calc_wpct/mir_mlr..eml_kssl_na_v1.rds"), "rb")
ossl.pca.mir = readRDS(pcm1)
ossl.model = readRDS(eml1)
mir.raw = read.csv("./sample-data/sample_mir_data.csv")[,-1]
mir2.raw = read.csv("./sample-data/sample_kssl.alpha_data.csv")[,-1]
summay(as.numeric(names(mir2.raw)))
summary(as.numeric(names(mir2.raw)))
summary(as.numeric(names(mir2.raw)), na.rm=TRUE)
summary(as.numeric(gsub("X", "", names(mir2.raw))), na.rm=TRUE)
summary(as.numeric(gsub("X", "", names(mir.raw))), na.rm=TRUE)
mir.raw2[5,]
mir2.raw[5,]
View(mir2.raw)
mir.raw = read.csv("./sample-data/sample_kssl.alpha_data.csv")[,-1]
dim(mir.raw)
wn = as.numeric(gsub("X", "", names(mir.raw)))
spc = as.matrix(mir.raw)
#colnames(spc) = paste(wn)
spc = as.data.frame(prospectr::resample(spc, wn, seq(600, 4000, by=2), interpol = "spline"))
spc = lapply(spc, function(j){ round(ifelse(j<0, NA, ifelse(j>3, NA, j))*1000) })
spc = as.data.frame(do.call(cbind, spc))
names(spc) = paste0("scan_mir.", seq(600, 4000, by=2), "_abs")
spc[1,1:10]
class(ossl.pca.mir) = "prcomp"
X1.pc = as.data.frame(predict(ossl.pca.mir, newdata=spc))[,1:n.spc]
n.spc=60
X1.pc = as.data.frame(predict(ossl.pca.mir, newdata=spc))[,1:n.spc]
colnames(X1.pc) = paste0("mir.PC", 1:n.spc)
str(X1.pc)
source("~/Documents/git/ossl-manual/R/ossl_functions.R")
mir.raw = read.csv("./sample-data/sample_kssl.alpha_data.csv")[,-1]
source("~/Documents/git/ossl-manual/R/ossl_functions.R")
pred.oc = predict.ossl(t.var="log..oc_usda.calc_wpct", mir.raw=mir.raw,
ossl.model=ossl.model, ylim=c(0,100),
ossl.pca.mir=ossl.pca.mir)
str(pred.oc$pred)
remotes::install_github("philipp-baumann/simplerspec")
#remotes::install_github("philipp-baumann/simplerspec")
ls <- c("plyr", "rgdal", "terra", "mlr", "ranger", "xgboost", "Cubist", "fastDummies", "prospectr", "simplerspec", " asdreader")
if(length(new.packages)) install.packages(new.packages)
x = lapply(ls, require, character.only = TRUE)
#remotes::install_github("philipp-baumann/simplerspec")
devtools::install_github("pierreroudier/asdreader")
#remotes::install_github("philipp-baumann/simplerspec")
#devtools::install_github("pierreroudier/asdreader")
ls <- c("plyr", "rgdal", "terra", "mlr", "ranger", "xgboost", "Cubist", "fastDummies", "prospectr", "simplerspec", " asdreader")
new.packages <- ls[!(ls %in% installed.packages()[,"Package"])]
if(length(new.packages)) install.packages(new.packages)
x = lapply(ls, require, character.only = TRUE)
library(asdreader)
#remotes::install_github("philipp-baumann/simplerspec")
#devtools::install_github("pierreroudier/asdreader")
ls <- c("plyr", "rgdal", "terra", "mlr", "ranger", "xgboost", "Cubist", "fastDummies", "prospectr", "simplerspec", " asdreader")
new.packages <- ls[!(ls %in% installed.packages()[,"Package"])]
#remotes::install_github("philipp-baumann/simplerspec")
#devtools::install_github("pierreroudier/asdreader")
ls <- c("plyr", "rgdal", "terra", "mlr", "ranger", "xgboost", "Cubist", "fastDummies", "prospectr", "simplerspec", "asdreader")
new.packages <- ls[!(ls %in% installed.packages()[,"Package"])]
if(length(new.packages)) install.packages(new.packages)
x = lapply(ls, require, character.only = TRUE)
mir.x = simplerspec::read_opus_bin_univ('sample-data/icr056141.0')
names(mir.x)
str(mir.x[["spc"]])[,1:20]
str(mir.x[["spc"]])[1:5,1:5]
dim(mir.x[["spc"]])
summary(mir.x[["spc"]]$`3994.4`)
mir.x[["spc"]]$`3994.4`
?matplot
x = as.numeric(names(mir.x[["spc"]]))
x = as.numeric(names(mir.x[["spc"]]))
matplot(y=as.vector(t(mir.x[["spc"]])), x=x,
ylim = c(0,3),
type = 'l',
xlab = "Wavelength",
ylab = "Absorbance"
)
rep = "http://s3.us-east-1.wasabisys.com/soilspectroscopy/ossl_models/"
source('./R/ossl_functions.R')
pcm2 = url(paste0(rep, "pca.ossl/mpca_mir_ossl_v1.rds"), "rb")
rm(pcm2)
pcm3 = url(paste0(rep, "pca.ossl/mpca_mir_ossl_v1.rds"), "rb")
eml3 = url(paste0(rep, "ph.h2o_usda.4c1_index/mir_mlr..eml_ossl_na_v1.rds"), "rb")
eml3 = url(paste0(rep, "ph.h2o_usda.4c1_index/mir_mlr..eml_ossl_ll_v1.rds"), "rb")
pcm3 = url(paste0(rep, "pca.ossl/mpca_mir_ossl_v1.rds"), "rb")
knitr::include_graphics("http://s3.us-east-1.wasabisys.com/soilspectroscopy/ossl_models/ph.h2o_usda.4c1_index/ap.mir_mlr..eml_ossl_ll_v1.rds.png")
ossl.pca.mir = readRDS(pcm3)
pcm3 = url(paste0(rep, "pca.ossl/mpca_mir_ossl_v1.rds"), "rb")
eml3 = url(paste0(rep, "ph.h2o_usda.4c1_index/mir_mlr..eml_ossl_ll_v1.rds"), "rb")
ossl.pca.mir = readRDS(pcm3)
ossl.model = readRDS(eml3)
pred.ph1 = predict.ossl(t.var="ph.h2o_usda.4c1_index", mir.raw=mir.x[["spc"]], ossl.model=ossl.model,
ossl.pca.mir=ossl.pca.mir, geo.type="ll", lon=28.50299833, lat=-13.10194667, hzn_depth=10,
cog.dir="/data/WORLDCLIM/")
class(mir.x[["spc"]])
dim(mir.x[["spc"]])
mir.raw=mir.x[["spc"]]
!class(mir.raw)=="data.frame"
!any(class(mir.raw)=="data.frame")
source("~/Documents/git/ossl-manual/R/ossl_functions.R")
pred.ph1 = predict.ossl(t.var="ph.h2o_usda.4c1_index", mir.raw=mir.x[["spc"]], ossl.model=ossl.model,
ossl.pca.mir=ossl.pca.mir, geo.type="ll", lon=28.50299833, lat=-13.10194667, hzn_depth=10,
cog.dir="/data/WORLDCLIM/")
lon=28.50299833
lat=-13.10194667
pnts = SpatialPoints(data.frame(lon, lat), proj4string = CRS("EPSG:4326"))
cog.lst = paste0(cog.dir, ossl.model$features[grep("clm_", ossl.model$features)], ".tif")
cog.dir="/data/WORLDCLIM/"
cog.lst = paste0(cog.dir, ossl.model$features[grep("clm_", ossl.model$features)], ".tif")
ov.tmp = extract.cog(pnts, cog.lst)
ov.tmp = terra::extract(terra::rast(cog.lst[j]), terra::vect(pnts))
ov.tmp = lapply(1:length(cog.lst), function(j){ terra::extract(terra::rast(cog.lst[j]), terra::vect(pnts))})
?terra::extract
ov.tmp = lapply(1:length(cog.lst), function(j){ terra::extract(terra::rast(cog.lst[j]), pnts@coords)})
source("~/Documents/git/ossl-manual/R/ossl_functions.R")
pred.ph1 = predict.ossl(t.var="ph.h2o_usda.4c1_index", mir.raw=mir.x[["spc"]], ossl.model=ossl.model,
ossl.pca.mir=ossl.pca.mir, geo.type="ll", lon=28.50299833, lat=-13.10194667, hzn_depth=10,
cog.dir="/data/WORLDCLIM/")
pred.ph1$pred
asd.raw = asdreader::get_spectra("sample-data/101453MD01.asd")
dim(asd.raw)
names(asd.raw)[1:10]
asd.raw = as.data.frame(asdreader::get_spectra("sample-data/101453MD01.asd"))
dim(asd.raw)
names(asd.raw)[1:10]
x = as.numeric(names(asd.raw))
matplot(y=as.vector(t(asd.raw)), x=x,
ylim = c(0,60),
type = 'l',
xlab = "Wavelength",
ylab = "Reflectance"
)
x = as.numeric(names(asd.raw))
matplot(y=as.vector(t(asd.raw)), x=x,
ylim = c(0,0.6),
type = 'l',
xlab = "Wavelength",
ylab = "Reflectance"
)
x = as.numeric(names(asd.raw))
matplot(y=as.vector(t(asd.raw)), x=x,
ylim = c(0,0.7),
type = 'l',
xlab = "Wavelength",
ylab = "Reflectance"
)
eml4 = url(paste0(rep, "ph.h2o_usda.4c1_index/visnir_mlr..eml_kssl_na_v1.rds"), "rb")
eml4 = url(paste0(rep, "ph.h2o_usda.4c1_index/visnir_mlr..eml_ossl_na_v1.rds"), "rb")
ossl.pca.visnir = readRDS(pmc3)
pmc3 = url(paste0(rep, "pca.ossl/mpca_visnir_kssl_v1.rds"), "rb")
pmc3 = url(paste0(rep, "pca.ossl/mpca_visnir_kssl_v1.rds"), "rb")
eml4 = url(paste0(rep, "ph.h2o_usda.4c1_index/visnir_mlr..eml_ossl_na_v1.rds"), "rb")
ossl.pca.visnir = readRDS(pmc3)
ossl.model = readRDS(eml4)
pred.ph1$pred
pred.ph2 = predict.ossl(t.var="ph.h2o_usda.4c1_index", visnir.raw=visnir.raw, ossl.model=ossl.model,
spc.type = "visnir", ossl.pca.visnir = ossl.pca.visnir)
pred.ph2 = predict.ossl(t.var="ph.h2o_usda.4c1_index", visnir.raw=asd.raw,
ossl.model=ossl.model, spc.type = "visnir", ossl.pca.visnir = ossl.pca.visnir)
pred.ph2$pred
